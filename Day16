513.找树左下角的值  
本题没有 中间节点的处理逻辑，只要左优先就行
所以前中后序的遍历都可以


如果想用层序遍历
步骤如下：
1. 创建一个队列，并且把根节点加入其中
    from collection import deque
    if root in None:
        return 0
    queue = deque([root])
2. 层序遍历
· 每次从队列中取出一个节点。
    while queue:
        size = len(queue)
        for i in range(size):
            node = queue.popleft()
· 每层遍历的第一个节点就是这一层最左边的节点，记录这个节点的值。
            if i == 0:
                result = node.val
· 把这个节点的子节点（左子节点和右子节点）按照顺序加入队列。
            if node.left:
                node.append(node.left)
            if node.right:
                node.append(node.right)

 


3. 继续遍历直到队列为空。


 112. 路径总和  
    def traversal(self, cur: TreeNode, count: int) -> bool:
        if not cur:
            return False
        
        count -= cur.val
        
        if not cur.left and not cur.right: # 遇到叶子节点
            return count == 0
        
        return self.traversal(cur.left, count) or self.traversal(cur.right, count)

 106. 从中序与后序遍历序列构造二叉树 
1. 如果后序数组为0，那就是空姐点

2. 后续数组的最后一个元素为节点元素
·    因为后序是“左右中”， 因此我们这里应该是在后序的尾部找到中节点

3. 寻找中序数组的位置作为切割点
·    在后序的尾部找到中节点之后，我们可以在中序数组中找到这个节点，然后作为切割点。由于中序是“左中右”，就可以把左节点的部分跟右节点的部分区分开来

4.切中序数组

5. 切后序数组

6. 递归处理左区间以及右区间

