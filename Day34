01背包理论基础


接下来还是用如下这个例子来进行讲解

背包最大重量为4。

物品为：

重量	价值
物品0	1	15
物品1	3	20
物品2	4	30
问背包能背的物品最大价值是多少？

这道题的暴力解法：
就是把每一个物品的取与不取的两个状态
时间复杂度为2^n

动态规划：

dp数组的定义
（二位dp数组的解法）
i 来表示物品、j表示背包容量。
dp[i][j]：为[0,i]之间的物品，放进容量为j的背包里面

递推公式

不放物品i:
dp[i-1][j]

放物品i：
dp[i-1][j-weight[i]]  +  value[i]

dp[i][j] = max(dp[i-1][j], dp[i-1][j-weight[i]]  +  value[i])

初始化：

for j in range(weight[0], bagweight+1):
    dp[0][j] = value[0]



01背包理论基础（滚动数组）
复习一下上面的 递推公式
dp[i][j] = max(dp[i-1][j], dp[i-1][j-weight[i] + value[i])
====================
**滚动数组的实质就是把上一层的数组拷贝下来
1. 新的dp[j]: 容量为j的背包的最大价值为dp[j]

2. 新的递推公式：
dp[j] = max(dp[j], dp[j-weight[i] + value[i])

3.  初始化
dp[0] = 0 背包容量为0的时候，最大的价值为0

4. 遍历顺序
这里需要倒序遍历
因为正序遍历会导致已经遍历过的内容发生冲突

需要先遍历物品，再遍历背包

