回溯理论基础

因为回溯的本质是穷举，穷举所有可能，然后选出我们想要的答案

回溯函数也就是递归函数，指的都是一个函数。

回溯法，一般可以解决如下几种问题：

组合问题：N个数里面按一定规则找出k个数的集合
切割问题：一个字符串按一定规则有几种切割方式
子集问题：一个N个数的集合里有多少符合条件的子集
排列问题：N个数按一定规则全排列，有几种排列方式
棋盘问题：N皇后，解数独等等


77. 组合  


剪枝操作：
为什么会出现剪枝操作？
（1，2，3，4中取两个数）n = 4, k = 4的情况下，选取了数字1，就没有必要再去遍历数字2了。
对于第二层，选取了数字2，就没有必要选取数字3了
所以，可以剪枝的地方就在递归中每一层的for循环所选择的起始位置。
实现剪枝操作，如果for循环选择的起始位置之后的元素个数 已经不足 我们需要的元素个数了，那么就没有必要搜索了。
因此剪枝的本质是控制for循环的范围

for i in range(startIndex, n - (k - len(path)) + 2):



 216.组合总和III 
剪枝操作
        if currentSum > n:  # 剪枝操作
            return  # 如果path的长度等于k但currentSum不等于targetSum，则直接返回
        for i in range(StartIndex, 10):
            currentSum += i 
            path.append(i)
            self.backtracking(k, n, currentSum, result, i + 1, path)
            currentSum -= i
            path.pop()
        return

 17.电话号码的字母组合 

以 digits = "23" 为例：

    初始调用 self.backtracking(digits, 0, [])，此时 path 为空。
    在第一次递归中，处理数字 2，对应字母 abc。将 a 入栈，调用 self.backtracking(digits, 1, ['a'])。
    在第二次递归中，处理数字 3，对应字母 def。将 d 入栈，调用 self.backtracking(digits, 2, ['a', 'd'])。
    因为 index 已等于 digits 的长度，当前路径 ['a', 'd'] 被组合成字符串 ad，并添加到结果中。
    回溯：将 d 出栈，路径变为 ['a']。 注意这里只pop一个。
    尝试下一个字母，将 e 入栈，调用 self.backtracking(digits, 2, ['a', 'e'])。
    类似地，将 ae 添加到结果中，并回溯。
    继续尝试其他可能的字母组合。



