 530.二叉搜索树的最小绝对差 
最直接的方法就是把所有的value转换成一个有序的数组，然后获得这个有序数组中两两差值中的最小值
想清楚面向对象编程中，对于这个列表，初始化应该怎么做
    def __init__(self,):
        self.vec = []

    def getMinimumDifference(self, root: Optional[TreeNode]) -> int:
        self.vec = [] #清空self.vec


遍历数组的时候，范围应该怎么取？
        for i in range(1, len(self.vec)):
            result = min(result, self.vec[i] - self.vec[i-1])


中序遍历中，用双指针法可以更加的直接的获得最小的差值，而不需要再开辟一个空间来存放数组



 501.二叉搜索树中的众数 
注意，这道题是二叉搜索树！
在处理二叉搜索树的时候都应该注意的事情是，应该是采取中序遍历，这样遍历出来的数组才应该是有序的一个数组

    def __init__(self):
        self.pre = None  # 前一个节点
        self.maxcount = 0 # 最大频率
        self.count = 0 # 当前值的频率
        self.result = [] # 结果列表


仔细思考一下中序遍历中处理‘中’的逻辑
要分被考虑 
# 第一个节点
# 与前一个节点数值相同
# 与前一个节点数值不同
的情况。
# 如果和最大值相同，放进result中
如果
 # 如果计数大于最大值频率
# 更新最大频率
# 清空result
应该怎么处理
以及要注意所有参数的初始化遍历的方式。



 236. 二叉树的最近公共祖先 

